#lang racket

;(define (drop-divisible i list)
;  map((if positive? (/ list 3))(else 0) list))

(define (drop-divisible i list)
  (cond
    [(zero? (/ list i))]
    [else (cons (drop-divisible i (first (rest list))))]))

;(module+ test
 ; (require rackunit)
 ; (check-equal? (drop-divisible 3 (list 2 3 4 5 6 7 8 9 10)) (list 2 3 4 5 7 8 10)))
(drop-divisible 3 '(1 2 3 4 5 6))