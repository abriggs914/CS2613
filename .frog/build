((3) 0 () 6 ((p+ #"/media/sf_FCS-HomeDir/CS2613/_src/posts/2018-09-20-lab5.scrbl" . unix) (p+ #"/media/sf_FCS-HomeDir/CS2613/_src/posts/2018-09-18-lab4.scrbl" . unix) (p+ #"/media/sf_FCS-HomeDir/CS2613/_src/posts/2018-09-18-scribble-demo.scrbl" . unix) (p+ #"/media/sf_FCS-HomeDir/CS2613/_src/posts/2018-09-13-lab3-journal.scrbl" . unix) (p+ #"/media/sf_FCS-HomeDir/CS2613/_src/posts/2018-09-11-lab2-journal.scrbl" . unix) (p+ #"/media/sf_FCS-HomeDir/CS2613/_src/posts/2018-09-06-journal1.scrbl" . unix)) () (h ! (equal) ((? . 0) f post (u . "Lab5") (? . 0) 1537459714 (p+ #"/media/sf_FCS-HomeDir/CS2613/2018/09/lab5.html" . unix) (u . "/2018/09/lab5.html") (u . "2018-09-20T12:53:21") (? . 1) #f (c (u . "Lab5")) (u . "\n<p>Today the lab was promarily focused on built-in higher-order functions in Dr Racket. We talked about traversing lists using foldl and foldr. We also worked on implementing and debugging for loops in racket. The implementation of the loops is syntactically very much different than that of java. The core functionality is the same however, due to the new syntax, I struggled with debugging one of the lab questions.</p>\n\n<p>We talked about the complexity of certain segments of code and how the decision to implement it with recursion or iteratively. Since Dr Racket will attempt process an infinte without thinking too much about it, playing around with the loop bounds, deemed to be a difficult task. The point of the exercise was to compare how accurately we could approximate an integral or a derivative. Since I had trouble adjusting the range, some of my tests weren&rsquo;t as useful or informative as I would have wanted.</p>\n\n<p>While on the topic of recursion, we briefly reviewed how the stack works and how stack frames are created. In racket, the stack works differently, where it can decide whether or not it needs to keep a newly created stack frame. This is useful when we are recursivly computing something, if we aren&rsquo;t changing the stack frame, we can save memory by choosing not to store the data in the stack.</p>") #t (u . "\n<p>Today the lab was promarily focused on built-in higher-order functions in Dr Racket. We talked about traversing lists using foldl and foldr. We also worked on implementing and debugging for loops in racket. The implementation of the loops is syntactically very much different than that of java. The core functionality is the same however, due to the new syntax, I struggled with debugging one of the lab questions.</p>\n\n<p>We talked about the complexity of certain segments of code and how the decision to implement it with recursion or iteratively. Since Dr Racket will attempt process an infinte without thinking too much about it, playing around with the loop bounds, deemed to be a difficult task. The point of the exercise was to compare how accurately we could approximate an integral or a derivative. Since I had trouble adjusting the range, some of my tests weren&rsquo;t as useful or informative as I would have wanted.</p>\n\n<p>While on the topic of recursion, we briefly reviewed how the stack works and how stack frames are created. In racket, the stack works differently, where it can decide whether or not it needs to keep a newly created stack frame. This is useful when we are recursivly computing something, if we aren&rsquo;t changing the stack frame, we can save memory by choosing not to store the data in the stack.</p>\n<!--more-->")) ((p+ #"/media/sf_FCS-HomeDir/CS2613/_src/posts/2018-09-18-scribble-demo.scrbl" . unix) f post (u . "Scribble Demo") (? . 2) 1537286358 (p+ #"/media/sf_FCS-HomeDir/CS2613/2018/09/scribble-demo.html" . unix) (u . "/2018/09/scribble-demo.html") (u . "2018-09-18T12:18:59") (? . 3) (? . 1) (c (u . "Lab4")) (u . "\n<p>This blog post was to practice mixing scrbl files in frog with racket commands.\nThis will allow us to make adjustments directly on the blog page. We created a hello function\nwill greet a person with their name.</p>\n\n<p>hello world</p>\n\n<p>hello Cookie Monster</p>\n\n<p>hello Big Bird</p>\n\n<p></p>\n\n<div class=\"SIntrapara\"><span style=\"font-weight: bold\">Shopping</span></div>\n\n<div class=\"SIntrapara\">\n <ul>\n  <li>\n   <p>cheese</p></li>\n  <li>\n   <p>fish</p></li>\n  <li>\n   <p>shuriken</p></li></ul></div>\n\n<div class=\"SIntrapara\">&lt;!&ndash; more &ndash;&gt;</div>") #f (u . "\n<p>This blog post was to practice mixing scrbl files in frog with racket commands.\nThis will allow us to make adjustments directly on the blog page. We created a hello function\nwill greet a person with their name.</p>\n\n<p>hello world</p>\n\n<p>hello Cookie Monster</p>\n\n<p>hello Big Bird</p>\n\n<p></p>\n\n<div class=\"SIntrapara\"><span style=\"font-weight: bold\">Shopping</span></div>\n\n<div class=\"SIntrapara\">\n <ul>\n  <li>\n   <p>cheese</p></li>\n  <li>\n   <p>fish</p></li>\n  <li>\n   <p>shuriken</p></li></ul></div>\n\n<div class=\"SIntrapara\">&lt;!&ndash; more &ndash;&gt;</div>")) ((p+ #"/media/sf_FCS-HomeDir/CS2613/_src/posts/2018-09-18-lab4.scrbl" . unix) f post (u . "lab4") (? . 1) 1537288028 (p+ #"/media/sf_FCS-HomeDir/CS2613/2018/09/lab4.html" . unix) (u . "/2018/09/lab4.html") (u . "2018-09-18T12:23:47") (? . 2) (? . 0) (c (u . "Lab4")) (u . "\n<p>Today was the fourth lab in CS2613. Today we talked more about racket and scribl. Specifically we talked about combining the two in\nDRRacket to create a dynamic blog post. We also talked about passing functions as parameters in racket. We worked on examples where we\ncreated lists and used the apply function to make something iterate for every element in the list. We also talkled about the identity\nfunction and created asimple function to print a given shape n times, where each iteration is 1 pixel larger in diameter than the last.</p>\n\n<p>We were able to get a little more hands-on experience using the debugger in DRRacket. To do this we had a function where an infinte\nloop would occur because the base case didn&rsquo;t catch the execution at all. We did this for two examples, one involving a simple recursive\nfactorial function and  the other counted the number of elements in a parameterized list. This exercise, I think, is good practice for the\nassignment 1 due on Friday. We need to rucursively traverse a list for the assignment as well.</p>\n\n<p>I feel that I am becoming more confortable with the syntax that racket uses, I just really need the exposure. The libraries seem quite\nlarge and there are many functions that can help a programmer achieve the functionality of a program, without writing the code from scratch\neach time. Personally I am a fan of the debugger and how quickly you can check the results of a function in racket. It is intuitive and does\nnot require copious amounts of print statements, like in java for example.</p>") #t (u . "\n<p>Today was the fourth lab in CS2613. Today we talked more about racket and scribl. Specifically we talked about combining the two in\nDRRacket to create a dynamic blog post. We also talked about passing functions as parameters in racket. We worked on examples where we\ncreated lists and used the apply function to make something iterate for every element in the list. We also talkled about the identity\nfunction and created asimple function to print a given shape n times, where each iteration is 1 pixel larger in diameter than the last.</p>\n\n<p>We were able to get a little more hands-on experience using the debugger in DRRacket. To do this we had a function where an infinte\nloop would occur because the base case didn&rsquo;t catch the execution at all. We did this for two examples, one involving a simple recursive\nfactorial function and  the other counted the number of elements in a parameterized list. This exercise, I think, is good practice for the\nassignment 1 due on Friday. We need to rucursively traverse a list for the assignment as well.</p>\n\n<p>I feel that I am becoming more confortable with the syntax that racket uses, I just really need the exposure. The libraries seem quite\nlarge and there are many functions that can help a programmer achieve the functionality of a program, without writing the code from scratch\neach time. Personally I am a fan of the debugger and how quickly you can check the results of a function in racket. It is intuitive and does\nnot require copious amounts of print statements, like in java for example.</p>\n<!--more-->")) ((p+ #"/media/sf_FCS-HomeDir/CS2613/_src/posts/2018-09-13-lab3-journal.scrbl" . unix) f post (u . "2018-09-13 Lab3 journal.") (? . 3) 1537285657 (p+ #"/media/sf_FCS-HomeDir/CS2613/2018/09/2018-09-13-lab3-journal.html" . unix) (u . "/2018/09/2018-09-13-lab3-journal.html") (u . "2018-09-13T12:36:13") (? . 4) (? . 2) (c (u . "Lab3")) (u . "\n<p>Today was the third lab in CS2613. It was primarily focused on programming in racket, specifically an introduction to recursive functions. The given assignments today were to create a function that printed a shape to the console window for each color given in a list. This was my first exposure to writing conditional statements in racket. The syntax is considerably different than that of the onditional statements I would write in a different language. They are shorter and more to the point. Initially the syntax was confusing because the cond is a function call of it&rsquo;s own.</p>\n\n<p>Afterwards We tried to take a recursive arthimetic program, and cover all test cases using DRRacket. The program was edited to add the functionality of multiplying by 0, and was then tested using the modult+test command. This allowed me to see the exact base cases that weren&rsquo;t executed during that particular set of test cases. This I realize is a really important task in order to make sure that no line of code is untested. In a language like racket where the variables don&rsquo;t typically have a declared type, it&rsquo;s critical to make sure that they remain the expected type during execution.</p>\n\n<p>Lastly, I read the contents of assignment1, and began to plan out the functionality of the programming questions. They require explicit recursive functionality to search lists and return created or modified lists. This seems like a direct application of what was went over in today&rsquo;s lab. The questions ask for a form of arthimetic checks to determine how the new lists should be constructed. Although DRRacket has an internal searching function to help the developer understand how to use the function calls, I am still unfamiliar with some of the syntax. This makes programming take a little longer to produce a simple program, but I am definetly picking it up slowely.</p>") #t (u . "\n<p>Today was the third lab in CS2613. It was primarily focused on programming in racket, specifically an introduction to recursive functions. The given assignments today were to create a function that printed a shape to the console window for each color given in a list. This was my first exposure to writing conditional statements in racket. The syntax is considerably different than that of the onditional statements I would write in a different language. They are shorter and more to the point. Initially the syntax was confusing because the cond is a function call of it&rsquo;s own.</p>\n\n<p>Afterwards We tried to take a recursive arthimetic program, and cover all test cases using DRRacket. The program was edited to add the functionality of multiplying by 0, and was then tested using the modult+test command. This allowed me to see the exact base cases that weren&rsquo;t executed during that particular set of test cases. This I realize is a really important task in order to make sure that no line of code is untested. In a language like racket where the variables don&rsquo;t typically have a declared type, it&rsquo;s critical to make sure that they remain the expected type during execution.</p>\n\n<p>Lastly, I read the contents of assignment1, and began to plan out the functionality of the programming questions. They require explicit recursive functionality to search lists and return created or modified lists. This seems like a direct application of what was went over in today&rsquo;s lab. The questions ask for a form of arthimetic checks to determine how the new lists should be constructed. Although DRRacket has an internal searching function to help the developer understand how to use the function calls, I am still unfamiliar with some of the syntax. This makes programming take a little longer to produce a simple program, but I am definetly picking it up slowely.</p>\n<!--more-->")) ((p+ #"/media/sf_FCS-HomeDir/CS2613/_src/posts/2018-09-11-lab2-journal.scrbl" . unix) f post (u . "Lab2") (? . 4) 1537285724 (p+ #"/media/sf_FCS-HomeDir/CS2613/2018/09/lab2.html" . unix) (u . "/2018/09/lab2.html") (u . "2018-09-11T12:35:45") (? . 5) (? . 3) (c (u . "Lab2")) (u . "\n<p>Today was the second day of labs. We conitiued to work on using git and commiting files. We deleted our local frog files and checked git to make sure that it was still there. We also covered some basics of the Racket language using DrRacket. We talked about functions in Racket and how to define them. I was able to print text and draw simple shapes to the screen from the DrRacket IDE.</p>\n\n<p>The DRRacket IDE was fairly straight forward to use and troubleshoot my bugs. I was able to play around with function definition and variable declaration. I learned how to use the hc-append function which concatenates two or more shapes together. This language is a little out of my comfort zone, currently. I have more expierence using object oriented languages and very little expierence using IDE&rsquo;s to run my code. The IDE was easier to figure out, but the language was a bit confusing despite the tutorials given from the course webpage.</p>\n\n<p>My understanding of Git and how to commit and clone repositories has improved from the first lab, however I consistently run into directory issues, and my git commands fail. I have had luck by simply moving one directory forward or backward and trying again. This I realize isn&rsquo;t the safest thing to do, as I might be accidently committing work that is not necessary or not up-to-date. I had an issue with my raco frog &ndash;clean and git diff &ndash;stat commands. At first I was not getting the desired output from deleting my files. After some backtracking and reading I was able to get the output I was looking for.</p>") #t (u . "\n<p>Today was the second day of labs. We conitiued to work on using git and commiting files. We deleted our local frog files and checked git to make sure that it was still there. We also covered some basics of the Racket language using DrRacket. We talked about functions in Racket and how to define them. I was able to print text and draw simple shapes to the screen from the DrRacket IDE.</p>\n\n<p>The DRRacket IDE was fairly straight forward to use and troubleshoot my bugs. I was able to play around with function definition and variable declaration. I learned how to use the hc-append function which concatenates two or more shapes together. This language is a little out of my comfort zone, currently. I have more expierence using object oriented languages and very little expierence using IDE&rsquo;s to run my code. The IDE was easier to figure out, but the language was a bit confusing despite the tutorials given from the course webpage.</p>\n\n<p>My understanding of Git and how to commit and clone repositories has improved from the first lab, however I consistently run into directory issues, and my git commands fail. I have had luck by simply moving one directory forward or backward and trying again. This I realize isn&rsquo;t the safest thing to do, as I might be accidently committing work that is not necessary or not up-to-date. I had an issue with my raco frog &ndash;clean and git diff &ndash;stat commands. At first I was not getting the desired output from deleting my files. After some backtracking and reading I was able to get the output I was looking for.</p>\n<!--more-->")) ((p+ #"/media/sf_FCS-HomeDir/CS2613/_src/posts/2018-09-06-journal1.scrbl" . unix) f post (u . "20180906Journal1") (? . 5) 1536345364 (p+ #"/media/sf_FCS-HomeDir/CS2613/2018/09/20180906journal1.html" . unix) (u . "/2018/09/20180906journal1.html") (u . "2018-09-06T12:16:30") #f (? . 4) (c (u . "foo") c (u . "bar") c (u . "Author: Avery Briggs")) (u . "\n<p>Today was the first day of labs for CS2613. We started with a quick reading of the course syllabus, and outlined the requirements and expectations for this course. We reviewed basic command line functions like creating a file within a new directory, and then deleting them. We had an introduction to the Frog progran and how to write journal entries for our weekly assignments. I struggled with the frog application at first as it was the first time I have personally used the software. Once I read through the tutorial insturctions and got some help from my classmates, I was able to successfully write and post this message.</p>\n\n<p>We then had a short tutorial on Git repositories and how we will use them to submit our class work this semester. We then moved on to creating our own repository to submit our porjects and frog journal entries. Then we committed our journal entries into our repository. I was initially a little stuck in the beginning, but my knowledge of Git from CS2263, slowely came back to me as I played around with the site.</p>\n\n<p>Today was, for me, a good first day in this course. I was able to review and refresh myself with technology that I do not have a lot of experience with. I am looking forward to having the chance to program in Python and JavaScript in this course, as I can increase my personal coding arsenal and will be able to have more flexibility in problem solving.</p>") #f (u . "\n<p>Today was the first day of labs for CS2613. We started with a quick reading of the course syllabus, and outlined the requirements and expectations for this course. We reviewed basic command line functions like creating a file within a new directory, and then deleting them. We had an introduction to the Frog progran and how to write journal entries for our weekly assignments. I struggled with the frog application at first as it was the first time I have personally used the software. Once I read through the tutorial insturctions and got some help from my classmates, I was able to successfully write and post this message.</p>\n\n<p>We then had a short tutorial on Git repositories and how we will use them to submit our class work this semester. We then moved on to creating our own repository to submit our porjects and frog journal entries. Then we committed our journal entries into our repository. I was initially a little stuck in the beginning, but my knowledge of Git from CS2263, slowely came back to me as I played around with the site.</p>\n\n<p>Today was, for me, a good first day in this course. I was able to review and refresh myself with technology that I do not have a lot of experience with. I am looking forward to having the chance to program in Python and JavaScript in this course, as I can increase my personal coding arsenal and will be able to have more flexibility in problem solving.</p>"))))